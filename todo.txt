
* if we pass in a completely invalid "instance" this gives a warning but then simply ignores it


* we need to replace this here:
"Generic COCO runtime implementation for the C language."

* actually there seems to be some bbob noisy code in the new code.....

* fix all lintr problems

* control coco log-level

* do we have to copy the coco C files

* create makevars -- do we have to? check checkmate

* doc which fields are read-only

* test the coco observer. we probably also need to be able to remove it

* in bbotk create a converter for objective

* unit test noisy

* in the noisy suite the entries for the field are not correct

* we have to watch out that noisy funs start with index 0

* bbob noisy funs return 2 values

* noisy: how is the dim of the fun determined in C code
--> DIM is a stupid global var apparently

* non-noisy: check that fun_idx is also set in problem

------------------------------

* suite-options and restrictions to certain funs and dims ---
--> not sure if we need this for now. use can simply select problems himself

* run coco visualization

* iterate DESC file

---------------------


❯ checking compiled code ... WARNING
  File ‘rcoco/libs/rcoco.so’:
    Found ‘__vsprintf_chk’, possibly from ‘vsprintf’ (C)
      Object: ‘coco.o’
    Found ‘exit’, possibly from ‘exit’ (C)
      Object: ‘coco.o’
    Found ‘stderr’, possibly from ‘stderr’ (C)
      Object: ‘coco.o’
    Found ‘stdout’, possibly from ‘stdout’ (C)
      Object: ‘coco.o’
  
  Compiled code should not call entry points which might terminate R nor
  write to stdout/stderr instead of to the console, nor use Fortran I/O
  nor system RNGs nor [v]sprintf.
  
  See ‘Writing portable packages’ in the ‘Writing R Extensions’ manual.

❯ checking compilation flags used ... NOTE
  Compilation used the following non-portable flag(s):
    ‘-mno-omit-leaf-frame-pointer’

------------------------------------------------------

/**
* observer   

 * Currently, four observers are supported:
 * - "bbob" is the observer for single-objective (both noisy and noiseless)
 * problems with known optima, which creates *.info, *.dat, *.tdat and *.rdat
 * files and logs the distance to the optimum.
 * - "bbob-biobj" is the observer for bi-objective problems, which creates
 * *.info, *.dat and *.tdat files for the given indicators, as well as an
 * archive folder with *.adat files containing nondominated solutions.
 * - "rw" is an observer for single- and bi-objective real-world problems that
 * logs all information (can be configured to long only some information) and
 * produces *.txt files (not readable by post-processing).
 * - "toy" is a simple observer that logs when a target has been hit.
 *
 * @param observer_name A string containing the name of the observer. Currently
 * supported observer names are "bbob", "bbob-biobj", "toy". Strings
 * "no_observer", "" or NULL return NULL.
 * @param observer_options A string of pairs "key: value" used to pass the
 * options to the observer. Some observer options are general, while others are
 * specific to some observers. Here we list only the general options, see
 * observer_bbob, observer_biobj and observer_toy for options of the specific
 * observers.
 * - "outer_folder: NAME" determines the outer folder for the experiment. The
 * default value is "exdata" (relative to the current folder). Absolute paths
 * are also allowed.
 * - "result_folder: NAME" determines the folder within the "exdata" folder into
 * which the results will be output. If the folder with the given name already
 * exists, first NAME_001 will be tried, then NAME_002 and so on. The default
 * value is "default".
 * - "algorithm_name: NAME", where NAME is a short name of the algorithm that
 * will be used in plots (no spaces are allowed). The default value is "ALG".
 * - "algorithm_info: STRING" stores the description of the algorithm. If it
 * contains spaces, it must be surrounded by double quotes. The default value is
 * "" (no description).
 * - "number_target_triggers: VALUE" defines the number of targets between each
 * 10**i and 10**(i+1) (equally spaced in the logarithmic scale) that trigger
 * logging. The default value is 10.
 * - "log_target_precision: VALUE" defines the precision used for logarithmic
 * targets (there are no targets for abs(values) < log_target_precision). The
 * default value is 1e-8.
 * - "lin_target_precision: VALUE" defines the precision used for linear
 * targets. The default value is 1e-5.
 * - "number_evaluation_triggers: VALUE" defines the number of evaluations to be
 * logged between each 10**i and 10**(i+1). The default value is 20.
 * - "base_evaluation_triggers: VALUES" defines the base evaluations used to
 * produce an additional evaluation-based logging. The numbers of evaluations
 * that trigger logging are every base_evaluation * dimension * (10**i). For
 * example, if base_evaluation_triggers = "1,2,5", the logger will be triggered
 * by evaluations dim*1, dim*2, dim*5, 10*dim*1, 10*dim*2, 10*dim*5, 100*dim*1,
 * 100*dim*2, 100*dim*5, ... The default value is "1,2,5".
 * - "precision_x: VALUE" defines the precision used when outputting variables
 * and corresponds to the number of digits to be printed after the decimal
 * point. The default value is 8.
 * - "precision_f: VALUE" defines the precision used when outputting f values
 * and corresponds to the number of digits to be printed after the decimal
 * point. The default value is 15.
 * - "precision_g: VALUE" defines the precision used when outputting constraints
 * and corresponds to the number of digits to be printed after the decimal
 * point. The default value is 3.
 * - "log_discrete_as_int: VALUE" determines whether the values of integer
 * variables (in mixed-integer problems) are logged as integers (1) or not (0 -
 * in this case they are logged as doubles). The default value is 0.
 *
 * @return The constructed observer object or NULL if observer_name equals NULL,
 * "" or "no_observer".
 */